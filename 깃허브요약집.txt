깃은 소규모 프로젝트에서 초대형 프로젝트에 이르기까지 모든 것을 신속하고 효율적으로 처리하도록 설계된 오픈 소스 버전 제어 시스템 즉 그냥 소프트웨어이다. => 

버전관리: 깃을 이용하여 프로젝트 내 문서의 수정 이력을 체계적으로 관리할 수 있다. 문서의 내용을 특정 시점으로 되돌리거나, 서비스 버전과 개발 버전을 별도로 운영하는 등 프로젝트 관리에 대해 다양한 편의를 제공받을 수 있다.

협업체계: 여러 사람이 하나의 프로젝트를 함께 수행할 때, 하나의 저장소를 기반으로 자신만의 개발 버전을 관리할 수 있어 협업에 도움이 된다. 또한 원격저장소를 운영할 경우에는 물리적인 장치(USB)나 메일 송수인 없이도 서로의 코드를 주고 받거나 합치는 작업을 손쉽게 처리할 수 있다. 

(파일의 복사 붙여넣기 없이 내부 데이터베이스를 통해 수정 이력을 남겨놓는다.) 저장 공간 낭비 없음

깃허브는 깃 저장소 호스팅을 지원하는 웹 서비스이다. 깃허브를 이용하면 온라인 상에 저장소를 만들어 원격으로 이를 관리가능
또한 깃이 명령행 인터페이스를 제공하는데 반해 깃허브는 그래픽 인터페이스를 제공하기 때문에 사용자 입장에서는 편리하게 깃 저장소를 관리 할 수 있다. 깃 허브는 깃 이용자들에게 편의를 제공하기 위해 존재하는 하나의 플랫폼이다
내 pc에 있는 깃 저장소를 깃허브가 제공하는 클라우드 저장소에 업로드해서 보관할 수 있는거다

CLI를 이용한 방법(깃) => 인터페이스가 다양하다
1. 깃 설치
2. 깃으로 관리할 프로젝트 생성(폴더 만들기 > 깃 배시(소프트웨어 도구)는 사용자가 깃 명령어를 입력 및 실행 할 수 있도록 명령행 인터페이스를 제공해주는 프로그램 이걸 열어준다 깃 설치하면 자동 설치됨, 맥은 새로운 터미널로 열기 > 깃 프로젝트화 시켜주기)
git config --global user.name "사용자(닉네임)" 이 시스템에서 깃을 사용하는 사람을 명시
git config user.name => 이름이 설정이 잘 되었나 확인
git config --global user.email "사용자메일"
git init > 빈 깃 저장소가 초기화, 깃 프로젝트를 만든다

ls
ls -al > 숨겨진거 까지 다 보인다
.git은 숨김파일 git관련 기능을 관리하는 파일
git만 하면 관련된 명령어가 나온다-도움말
clear

git config 깃과 관련된 설정할 내용이 있을때 사용하는 명령어

깃 프로젝트는 내부에 가상의 관리 영역을 만들어 파일의 상태를 구분하고 버전을 관리한다. 관리 영역은 세가지
working directory or tree: 개발자가 실제로 작업을 하는 영역. 원래있던 폴더
staging area: 워킹 디렉토리에서 작업한 내용을 수정한 이력을 잠시 두는 공간
repository: 대기 중인 문서를 최종적으로 기록하는 장소(스테이지에 있는 것을), 기록이 쌓인다

워킹 디렉토리는 깃에 의해 수정사항을 추적한다.
untracked file 이제 막 생성된 파일이여서 추적이 되고 있지 않은 상태 > 스테이지로 이동해줘야한다 마지막으로 commit
unmodified file 추적중이지만 딱히 수정사항은 없는 상태
modified file 추적 중인 파일이며 수정 사항이 감지된 상태 > 스테이지로 이동해줘야 한다 commit

즉 깃을 이용한 프로젝트 버전 관리는 문서의 작업 이력을 쌓거나 git 명령어로 내가 만든 파일의 상태와 영역을 변경하는 작업
깃 저장소 내부에 쌓인 이력을을 기반으로 사용자는 과거 특정 시점으로 변경, 이력 간의 변경 사항을 모니터링 등 다양한 작업가능 
장점 문서나 폴더에 대한 복사를 하지않고도 가능

명령어 종류
깃 명령어:  저장소 내에서 버전 관리, 협업 등 깃이 제공하는 다양한 기능을 수행하기 위해 입력하는 명령어로 git으로 시작한다
시스템 명령어: 폴더 이동, 파일 생성 및 삭제 등 컴퓨터 시스템에 관련 기능을 수행하기 위해 입력하는 명령어, 리눅스 운영체제의 스스템 명령어에 기반을 두고 있다.

git status
git add 워킹 디렉터리 내 문서를 스테이징 영역에 추가하는 깃 명령어. git add . 현재 워킹 디렉토리에 있는 모든 사항을 한번에 올린다
git commit 달라진 터미널의 인터페이스 vi vim 터미널 에디터, 커밋 메세지는 내가 남기고 싶은 내용을 남기는 거다. 수정 이력을 남겼다.
git commit -m "" 에디터를 열지않고도 바로 커밋 메세지를 넣을수 있다.
git log

touch 파일 만들기

.gitignore 깃 프로젝트 내 문서 중 수정 이력에서 제외하고 싶은 문서가 있다면 이를 추적 대상에서 완전히 제외시킬 수 있다. 나만 알고 싶다 깃에 감지안되고 기록도 안남고
nano .gitignore하면 그거에 대한 에디터가 나옴 컨트롤 x가 저장

로그에는 최신순으로 출력이 되고 구성요소는 커밋 해시, 작업자 정보, 날짜와 시간, 커밋 메세지가 출력, 특정 커밋은 브랜치명과 헤드의 참고자가 참고된다

git log -p, -숫자 최신거 위주로 나열, --oneline
git log --online
git checkout 커밋해시 특정 시점으로 돌아간다. 이전 이후 다 가능
git reflog 헤드가 이동해온 이력을 보여준다. 마스터라고 적혀있으면 git checkout master 가능

git reset > --hard, --mixed, --soft 커밋해시
git revert 커밋 해시 > 되돌렸다라는 내용을 남기는 거

개발을 하다 보면 코드를 여러 개로 복사해야 하는 일이 자주 생기는데, 코드를 통째로 복사하고 나서 원래 코드와는 상관없이 독립적으로 개발을 진행할 수 있도록 하는 것이 브랜치의 목적 브랜치란 기존 저장소에서 분기된 저장소의 복사본이다 기본브랜치가 하나 주어진 상태로 시자한다. 기존에서 작업을 하면 위험이 발생할 수 있기에 특정 시점에서 분기하고 따로 작업을 나누어서 실시, 그리고 나중에는 합칠수도 있다. 병합
git merge 병합할 브랜치 이름
git branch 지금 브랜치가 뭐가 있는지 목록화를 한다
git branch 브랜치 이름
git checkout 브랜치이름
git branch -d 이름


깃허브는 부분유료서비스 > 내 로컬 리포지트까지는 프라이빗한 공간이다. 이걸 다른 사람이 보게 하고 싶고 작업을 같이 하고 싶다 >
원격 저장소를 이용, 웹상에 존재 즉 주소를 알면 저장소 내용을 알 수 있다. 깃 프로젝트를 공유가능
git remote -v
git remote add 원격저장소이름 원격저장소주소
git push
git pull 로컬로 가져오기

puch 하기전에 깃허브에서 원격 저장소를 만든다.
public 주소만 치면 누구라도 올수 있다. 대부분의 public 개인 프로젝트는 깃허브에서 나오는 주소는 연결고리이다. 공간만 있고 별다른 내용은 없다 원격저장소의 이름은 origin으로 사용한다 원본 역할을 해서,
private는 허락한 사람만 가능
fetch 내려받기
push는 원격저장소에 올리기 처음에 git push가 안될가능성이 있다 로컬과 원격의 브랜치가 따로 운영될 가능성, 이름이 같다고 단정지을수 없다. 명확한 처리가 필요하다
git push -u origin master 처음에는 이게 중요, 근데 안되는 경우가 있다
처음으로 이작업을 하면 깃허브가 사용자를 확인 계정을 치거나 혹은 브라우저에서 계정을 치라고 나온다

git clone 복제한다
깃허브에서는 기본브랜치 이름을 main으로 한다

